# api.py
from fastapi import FastAPI, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
import asyncpg
from config import DB_CONFIG
from parsers.base_parser import light_normalize # <-- 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é

app = FastAPI(
    title="Pharmacy Aggregator API",
    description="API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö –∏ —Ü–µ–Ω–∞—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∞–ø—Ç–µ–∫.",
    version="1.0.0"
)

# --- Middleware –¥–ª—è CORS ---
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], # –†–∞–∑—Ä–µ—à–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å –ª—é–±—ã—Ö –¥–æ–º–µ–Ω–æ–≤
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º (–¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π) ---
# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ http://127.0.0.1:8000/static/images/products/image.jpg
app.mount("/static", StaticFiles(directory="static"), name="static")


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î ---
db_pool = None

@app.on_event("startup")
async def startup():
    global db_pool
    try:
        db_pool = await asyncpg.create_pool(**DB_CONFIG)
        print("‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        print(f"‚ùå API –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

@app.on_event("shutdown")
async def shutdown():
    if db_pool:
        await db_pool.close()
        print("üîå API –æ—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")


# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API ---

@app.get("/search", tags=["Medicines"])
async def search_medicines(q: str = ""):
    """
    –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø–æ–ª–µ–º `name` –≤ –±–∞–∑–µ.
    """
    if not q or len(q) < 3:
        return {"message": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤."}
    
    search_term = light_normalize(q) # <-- 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º light_normalize
    async with db_pool.acquire() as conn:
        # <-- 3. –ò—â–µ–º –ø–æ –ø–æ–ª—é `name`, –∞ –Ω–µ `normalized_name`
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ–º, –≤ —Å–∫–æ–ª—å–∫–∏—Ö –∞–ø—Ç–µ–∫–∞—Ö –µ—Å—Ç—å —Ç–æ–≤–∞—Ä (pharmacy_count)
        query = """
        SELECT 
            m.id, 
            m.name, 
            m.image_url, 
            MIN(p.price) as min_price,
            COUNT(p.pharmacy_id) as pharmacy_count
        FROM medicines m
        JOIN pharmacy_prices p ON m.id = p.medicine_id
        WHERE similarity(m.name, $1) > 0.2
        GROUP BY m.id
        ORDER BY similarity(m.name, $1) DESC
        LIMIT 20;
        """
        results = await conn.fetch(query, search_term)
        return [dict(r) for r in results]

@app.get("/medicine/{medicine_id}", tags=["Medicines"])
async def get_medicine_details(medicine_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ –∏ —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω –≤ —Ä–∞–∑–Ω—ã—Ö –∞–ø—Ç–µ–∫–∞—Ö.
    """
    async with db_pool.acquire() as conn:
        medicine = await conn.fetchrow("SELECT * FROM medicines WHERE id = $1", medicine_id)
        if not medicine:
            raise HTTPException(status_code=404, detail="–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        prices = await conn.fetch("""
            SELECT p.price, p.last_updated, ph.name AS pharmacy_name
            FROM pharmacy_prices p
            JOIN pharmacies ph ON p.pharmacy_id = ph.id
            WHERE p.medicine_id = $1 ORDER BY p.price;
        """, medicine_id)
        
        return {"details": dict(medicine), "prices": [dict(p) for p in prices]}

# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –ò–ï–†–ê–†–•–ò–ò –ö–ê–¢–ï–ì–û–†–ò–ô ---

@app.get("/categories", tags=["Categories"])
async def get_root_categories():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (—É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è).
    """
    async with db_pool.acquire() as conn:
        # <-- 4. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã `categories`
        query = "SELECT id, name FROM categories WHERE parent_id IS NULL ORDER BY name;"
        results = await conn.fetch(query)
        return [dict(r) for r in results]

@app.get("/categories/{category_id}", tags=["Categories"])
async def get_category_children(category_id: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    async with db_pool.acquire() as conn:
        query = "SELECT id, name FROM categories WHERE parent_id = $1 ORDER BY name;"
        results = await conn.fetch(query, category_id)
        return [dict(r) for r in results]