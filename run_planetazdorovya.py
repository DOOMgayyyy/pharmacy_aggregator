# run_planetazdorovya.py

import asyncio
import asyncpg
import sys

# --- Import configurations ---
from config import DB_CONFIG
from parsers.planeta_zdorovya.planeta_zdorovya_parser import PlanetaZdorovyaParser
# –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
from parsers.base_parser import BaseParser, light_normalize

# --- Source File ---
# Note: You could also move this path to your config.py if you prefer
JSON_FILE_PATH = "parsers/planeta_zdorovya/all_products_async.json"

async def main():
    """
    Main script to run the 'Planeta Zdorovya' parser.
    Accepts arguments: 'stage1' (populate medicines), 'stage2' (parse prices), or 'full'.
    """
    stage = sys.argv[1] if len(sys.argv) > 1 else 'full'

    # Establish database connection using the imported config
    db_pool = await asyncpg.create_pool(**DB_CONFIG)
    
    parser = PlanetaZdorovyaParser(db_pool)

    # --- STAGE 1: Populate the master 'medicines' table ---
    if stage in ['stage1', 'full']:
        print("="*50)
        print("‚ñ∂Ô∏è –≠–¢–ê–ü 1: –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ì–õ–ê–í–ù–û–ì–û –ö–ê–¢–ê–õ–û–ì–ê –õ–ï–ö–ê–†–°–¢–í–ï–ù–ù–´–• –°–†–ï–î–°–¢–í (–ü–ª–∞–Ω–µ—Ç–∞ –ó–¥–æ—Ä–æ–≤—å—è)")
        print("="*50)

        await parser.populate_medicines_from_json(JSON_FILE_PATH)
        
        print("\n" + "="*50)
        print("‚úÖ STAGE 1 COMPLETE.")

    # --- STAGE 2: Parse prices and link them to medicines ---
    if stage in ['stage2', 'full']:
        print("\n‚ñ∂Ô∏è –≠–¢–ê–ü 2: –†–ê–ó–ë–û–† –¶–ï–ù (–ü–ª–∞–Ω–µ—Ç–∞ –ó–¥–æ—Ä–æ–≤—å—è)")
        print("="*50)
        
        try:
            await parser.parse_prices_from_json(JSON_FILE_PATH)
        except Exception as e:
            print(f"‚ùå –ù–∞ —ç—Ç–∞–ø–µ 2 –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

        print("\n" + "="*50)
        print("‚úÖ –≠–¢–ê–ü 2 –ó–ê–í–ï–†–®–ï–ù.")

    # --- Argument validation ---
    if stage not in ['stage1', 'stage2', 'full']:
        print(f"‚ùå Invalid argument '{stage}'. Use 'stage1', 'stage2', or 'full'.")
        await db_pool.close()
        return

    # --- Clean up and exit ---
    await db_pool.close()
    print("\nüéâ –í–°–ï –≠–¢–ê–ü–´ –°–û–ó–î–ê–ù–ò–Ø '–ü–õ–ê–ù–ï–¢–´ –ó–î–û–†–û–í–¨–Ø' –ó–ê–í–ï–†–®–ï–ù–´. –†–ê–ë–û–¢–ê –ó–ê–í–ï–†–®–ï–ù–ê.")

if __name__ == "__main__":
    asyncio.run(main())